,"Heat Wave"
#,"Epidemic"
#,"Cold Wave"
)
rapid.onset.cc <- c("Cyclone","Flood","Pluvial/Flash Flood","Storm Surge")
slow.onset.cc <- setdiff(climate.crises, rapid.onset.cc)
indirect.cc <- c("Food Insecurity","Insect Infestation","Epidemic")
direct.cc <- setdiff(climate.crises, indirect.cc)
###Set of natural disasters
natural.disasters <-
c("Cyclone"
,"Drought"
,"Flood"
,"Food Insecurity"
,"Insect Infestation"
,"Pluvial/Flash Flood"
,"Storm Surge"
,"Heat Wave"
,"Epidemic"
,"Cold Wave"
,"Volcanic Eruption"
,"Earthquake"
,"Tsunami"
,"Landslide"
)
rapid.onset.nd <- c("Cyclone","Flood","Pluvial/Flash Flood","Storm Surge","Volcanic Eruption","Earthquake","Tsunami")
slow.onset.nd <- setdiff(natural.disasters, rapid.onset.nd)
data.sub$onset.cc <- "NA"
data.sub$onset.cc[which(data.sub$type %in% rapid.onset.cc)] <- "rapid"
data.sub$onset.cc[which(data.sub$type %in% slow.onset.cc)] <- "slow"
data.sub$onset.nd <- "NA"
data.sub$onset.nd[which(data.sub$type %in% rapid.onset.nd)] <- "rapid"
data.sub$onset.nd[which(data.sub$type %in% slow.onset.nd)] <- "slow"
data.sub$direct.cc <- "None"
data.sub$direct.cc[which(data.sub$type %in% indirect.cc)] <- "indirect"
data.sub$direct.cc[which(data.sub$type %in% direct.cc)] <- "direct"
data.sub$overall <- "overall"
###Merge to income group, conflict and currency conversions
data.sub <- merge(data.sub, isodata, by.x="country.code", by.y="iso2c", all.x=T)
data.sub <- merge(data.sub, conflict.countries, by.x=c("country.code","year"), by.y=c("iso2c","Year"), all.x=T)
data.sub <- merge(data.sub, data.conversions, by=c("country.code", "start", "end"))
data.sub[is.na(conflict)]$conflict <- "Non conflict"
data.sub$income.type <- paste0(data.sub$income,": ",data.sub$type)
###Year-weight values
data.sub$beneficiary.years <- data.sub$beneficiaries*data.sub$length
###Deflated PPP and CHF values
data.sub$requestedPPP <-  data.sub$requested*data.sub$PPPconvert
data.sub$fundedPPP <- data.sub$funded*data.sub$PPPconvert
data.sub$requestedCHF <-  data.sub$requested*data.sub$CHFconvert
data.sub$fundedCHF <- data.sub$funded*data.sub$CHFconvert
###Analysis###
data.clean <- data.sub[(year >= 2000
& type %in% natural.disasters
& type %in% climate.crises
& type != "Epidemic"
& requested > 0
)]
logfit <- function(x,y){
xy <- data.table(cbind(x,y))
xy <- xy[complete.cases(xy)]
x <- xy$x
y <- xy$y
if(nrow(xy)>1){
fit <- lm(log10(y) ~ log10(x))
beta0 <- coef(summary(fit))[2,]
beta1 <- coef(summary(fit))[1,]
df <- data.table(cbind(t(beta0[c(1:2)]),t(beta1[c(1:2)])))
} else {
df <- data.table(t(rep(as.numeric(NA),4)))
}
names(df) <- c("b0","b0.se","b1","b1.se")
df$count <- nrow(xy)
df$total.numerator<- sum(y)
df$total.denominator <- sum(x)
linearmeans <- (y/x)
df$unw.mean <- mean(linearmeans)
df$unw.mean.se <- sqrt(var(linearmeans))/sqrt(length(linearmeans))
if(length(linearmeans)>1){
boot.out <- boot(cbind(linearmeans, x), statistic = function(data, i) weighted.mean(data[,1][i], data[,2][i]), R=10000)
ci <- boot.ci(boot.out, type="bca")
} else {
ci <- list(t0=linearmeans, bca=rbind(rep(as.numeric(NA),5)))
}
df$w.mean <- ci$t0
df$w.mean.lci <- ci$bca[,4]
df$w.mean.uci <- ci$bca[,5]
return(df)
}
factors <- c("overall"
#,"aid type"
#,"type"
#,"income"
#,"onset.cc"
#,"onset.nd"
#,"lustrum"
#,"conflict"
,"income.type")
currencies <- c("CHF","PPP")
data.list <- list()
set.list <- list()
for(i in 1:length(factors)){
var <- factors[i]
for(j in 1:length(currencies)){
cur <- currencies[j]
requestedcur <- as.name(paste0("requested",cur))
agg <- data.clean[,(logfit(beneficiary.years,eval(requestedcur)))
,by=eval(var)]
agg <- cbind(cur,var,agg)
set.list[[j]] <- agg
}
set <- rbindlist(set.list)
data.list[[i]] <- set
}
aggs <- rbindlist(data.list)
View(aggs)
fwrite(aggs, "output/ifrc.go.appeal.complete.income.type.csv")
list.of.packages <- c("readr","data.table","varhandle","plyr","Hmisc","jsonlite")
new.packages <- list.of.packages[!(list.of.packages %in% installed.packages()[,"Package"])]
if(length(new.packages)) install.packages(new.packages)
lapply(list.of.packages, require, character.only=T)
#ITEP 2018 Chapter 1
#Figure 1
setwd("G:/My Drive/Work/GitHub/poverty_predictions")
WEO=read.delim("http://www.imf.org/external/pubs/ft/weo/2018/01/weodata/WEOApr2018all.xls", na.strings="n/a")
WEO=subset(WEO, WEO.Subject.Code=="NGDP_RPCH")
WEO=unfactor(WEO)
WEO$growth13to17=(WEO$X2013+WEO$X2014+WEO$X2015+WEO$X2016+WEO$X2017)/5
WEO$growthforecast=(WEO$X2018+WEO$X2019+WEO$X2020+WEO$X2021+WEO$X2022+WEO$X2023)/6
forecasts=WEO[,c("Country","growth13to17","growthforecast")]
WEO$Country[which(WEO$Country=="Democratic Republic of the Congo")]="Congo, Democratic Republic of"
WEO$Country[which(WEO$Country=="Republic of Congo")]="Congo, Republic of"
WEO$Country[which(WEO$Country=="Côte d'Ivoire")]="Cote d'Ivoire"
WEO$Country[which(WEO$Country=="Egypt")]="Egypt, Arab Republic of"
WEO$Country[which(WEO$Country=="The Gambia")]="Gambia, The"
WEO$Country[which(WEO$Country=="Islamic Republic of Iran")]="Iran, Islamic Republic of"
WEO$Country[which(WEO$Country=="Russia")]="Russian Federation"
WEO$Country[which(WEO$Country=="Syria")]="Syrian Arab Republic"
WEO$Country[which(WEO$Country=="Venezuela")]="Venezuela, Republica Bolivariana de"
WEO$Country[which(WEO$Country=="Yemen")]="Yemen, Republic of"
WEO$Country[which(WEO$Country=="Lao P.D.R.")]="Lao People's Democratic Republic"
WEO$Country[which(WEO$Country=="FYR Macedonia")]="Macedonia, former Yugoslav Republic of"
WEO$Country[which(WEO$Country=="Micronesia")]="Micronesia, Federated States of"
WEO$Country[which(WEO$Country=="São Tomé and Príncipe")]="Sao Tome and Principe"
WEO$Country[which(WEO$Country=="Korea")]="Korea, Republic of"
names(WEO)[which(names(WEO)=="Country")]<- "CountryName"
WEO=WEO[,c("CountryName","growth13to17","growthforecast")]
View(WEO)
View(forecasts)
WEO=read.delim("http://www.imf.org/external/pubs/ft/weo/2018/01/weodata/WEOApr2018all.xls", na.strings="n/a")
WEO=subset(WEO, WEO.Subject.Code=="NGDP_RPCH")
View(WEO)
WEO=subset(WEO, WEO.Subject.Code=="NGDP_RPCH")
WEO=unfactor(WEO)
WEO$growth15to17=(WEO$X2016+WEO$X2017)/2
WEO$growthforecast=(WEO$X2018+WEO$X2019+WEO$X2020+WEO$X2021+WEO$X2022+WEO$X2023)/6
forecasts=WEO[,c("Country","growth15to17","growthforecast")]
WEO$Country[which(WEO$Country=="Democratic Republic of the Congo")]="Congo, Democratic Republic of"
WEO$Country[which(WEO$Country=="Republic of Congo")]="Congo, Republic of"
WEO$Country[which(WEO$Country=="Côte d'Ivoire")]="Cote d'Ivoire"
WEO$Country[which(WEO$Country=="Egypt")]="Egypt, Arab Republic of"
WEO$Country[which(WEO$Country=="The Gambia")]="Gambia, The"
WEO$Country[which(WEO$Country=="Islamic Republic of Iran")]="Iran, Islamic Republic of"
WEO$Country[which(WEO$Country=="Russia")]="Russian Federation"
WEO$Country[which(WEO$Country=="Syria")]="Syrian Arab Republic"
WEO$Country[which(WEO$Country=="Venezuela")]="Venezuela, Republica Bolivariana de"
WEO$Country[which(WEO$Country=="Yemen")]="Yemen, Republic of"
WEO$Country[which(WEO$Country=="Lao P.D.R.")]="Lao People's Democratic Republic"
WEO$Country[which(WEO$Country=="FYR Macedonia")]="Macedonia, former Yugoslav Republic of"
WEO$Country[which(WEO$Country=="Micronesia")]="Micronesia, Federated States of"
WEO$Country[which(WEO$Country=="São Tomé and Príncipe")]="Sao Tome and Principe"
WEO$Country[which(WEO$Country=="Korea")]="Korea, Republic of"
names(WEO)[which(names(WEO)=="Country")]<- "CountryName"
WEO=WEO[,c("CountryName","growth15to17","growthforecast")]
#Read in PovcalNet data
load("project_data/SMYPovcalScrapeSept2018_low.RData")
smy_total=unfactor(data.frame(smy_total))
smy_total=unfactor(data.frame(smy_total_low))
smy_total= subset(smy_total, CoverageType==3|CoverageType==5)
View(smy_total_low)
smy_total$CoverageType
smy_total_low$CoverageType
smy_total= subset(smy_total, CoverageType==N|CoverageType==A)
smy_total=unfactor(data.frame(smy_total_low))
smy_total= subset(smy_total, CoverageType=="N"|CoverageType=="A")
ind=subset(smy_total, CountryName=="India")
smy_total = subset(smy_total, CountryName!="India")
smy_total= subset(smy_total, displayMode %in% c(0,2,4))
smy_total=rbind(smy_total,ind)
smy_total= smy_total[,1:28]
smy_total=smy_total[which(smy_total$RequestYear==2013),]
load("project_data/SMYPovcalScrapeSept2018_low.RData")
smy_total=unfactor(data.frame(smy_total_low))
smy_total= subset(smy_total, CoverageType=="N"|CoverageType=="A")
ind=subset(smy_total, CountryName=="India")
smy_total = subset(smy_total, CountryName!="India")
smy_total= subset(smy_total, displayMode %in% c(0,2,4))
smy_total=rbind(smy_total,ind)
smy_total= smy_total[,1:28]
smy_total=smy_total[which(smy_total$RequestYear==2015),]
merge.dat=join(smy_total, WEO, by="CountryName")
merge.dat$pl2018 = merge.dat$PovertyLine*(1+(merge.dat$growth15to17/100))^2
merge.dat$pl2030.base = merge.dat$pl2018*(1+(merge.dat$growthforecast/100))^12
merge.dat$pl2030.plusone = merge.dat$pl2018*(1+((merge.dat$growthforecast+1)/100))^12
merge.dat$pl2030.minusone = merge.dat$pl2018*(1+((merge.dat$growthforecast-1)/100))^12
merge.dat$basediff=abs(merge.dat$pl2030.base-1.9)
merge.dat$plusonediff=abs(merge.dat$pl2030.plusone-1.9)
merge.dat$minusonediff=abs(merge.dat$pl2030.minusone-1.9)
merge.dat=merge.dat[,c("CountryName","H","basediff","plusonediff","minusonediff","RegionCID")]
View(merge.dat)
merge.dat=merge.dat[,c("CountryName","Headcount","basediff","plusonediff","minusonediff","RegionCID")]
merge.dat=merge.dat[,c("CountryName","HeadCount","basediff","plusonediff","minusonediff","RegionCID")]
merge.dat=merge.dat[,c("CountryName","HeadCount","basediff","plusonediff","minusonediff","Region")]
names(merge.dat)
setdiff(c("CountryName","HeadCount","basediff","plusonediff","minusonediff","Region"),names(merge.dat))
merge.dat=merge.dat[,c("CountryName","HeadCount","basediff","plusonediff","minusonediff","RegionCode")]
base=data.table(merge.dat)[,.SD[which.min(basediff)],by=.(CountryName)]
names(base)
names(base)[which(names(base)=="Headcount")]="BaseHC2030"
base=base[,c("CountryName","BaseHC2030","RegionCode")]
names(base)[which(names(base)=="HeadCount")]="BaseHC2030"
base=base[,c("CountryName","BaseHC2030","RegionCode")]
base=as.data.frame(base)
plusone=data.table(merge.dat)[,.SD[which.min(plusonediff)],by=.(CountryName)]
names(base)[which(names(base)=="HeadCount")]="BaseHC2030"
base=base[,c("CountryName","BaseHC2030","RegionCode")]
base=as.data.frame(base)
plusone=data.table(merge.dat)[,.SD[which.min(plusonediff)],by=.(CountryName)]
names(plusone)[which(names(plusone)=="HeadCount")]="PlusOneHC2030"
plusone=plusone[,c("CountryName","PlusOneHC2030")]
plusone=as.data.frame(plusone)
minusone=data.table(merge.dat)[,.SD[which.min(minusonediff)],by=.(CountryName)]
names(minusone)[which(names(minusone)=="HeadCount")]="MinusOneHC2030"
minusone=minusone[,c("CountryName","MinusOneHC2030")]
minusone=as.data.frame(minusone)
dfs=list(base,plusone,minusone)
forecasts=join_all(dfs)
forecasts$BaseHC2030=as.numeric(forecasts$BaseHC2030)
forecasts$MinusOneHC2030=as.numeric(forecasts$MinusOneHC2030)
forecasts$PlusOneHC2030=as.numeric(forecasts$PlusOneHC2030)
regionalforecasts=data.table(forecasts)[,.(r.base=mean(BaseHC2030)
,r.minusone=mean(MinusOneHC2030)
,r.plusone=mean(PlusOneHC2030)),
by=.(RegionCode)]
#WorldPopulationProspects
pop=read.csv("https://esa.un.org/unpd/wpp/DVD/Files/1_Indicators%20(Standard)/CSV_FILES/WPP2017_TotalPopulationBySex.csv")
pop2030=subset(pop, Time==2030 & Variant=="High")
#WorldPopulationProspects
pop=read.csv("https://esa.un.org/unpd/wpp/DVD/Files/1_Indicators%20(Standard)/CSV_FILES/WPP2017_TotalPopulationBySex.csv")
pop2030=subset(pop, Time==2030 & Variant=="High")
View(pop)
#WorldPopulationProspects
pop=read.csv("https://esa.un.org/unpd/wpp/DVD/Files/1_Indicators%20(Standard)/CSV_FILES/WPP2017_TotalPopulationBySex.csv")
#WorldPopulationProspects
pop=fread("https://esa.un.org/unpd/wpp/DVD/Files/1_Indicators%20(Standard)/CSV_FILES/WPP2017_TotalPopulationBySex.csv")
#WorldPopulationProspects
pop=fread("https://population.un.org/wpp/Download/Files/1_Indicators%20(Standard)/CSV_FILES/WPP2019_TotalPopulationBySex.csv")
pop2030=subset(pop, Time==2030 & Variant=="High")
names(pop2030)[which(names(pop2030)=="Location")]="CountryName"
pop2030$CountryName=unfactor(pop2030$CountryName)
pop2030$CountryName[which(pop2030$CountryName=="Bolivia (Plurinational State of)")]="Bolivia"
View(pop)
View(pop2030)
#pop2030$CountryName=unfactor(pop2030$CountryName)
pop2030$CountryName[which(pop2030$CountryName=="Bolivia (Plurinational State of)")]="Bolivia"
pop2030$CountryName[which(pop2030$CountryName=="Democratic Republic of the Congo")]="Congo, Democratic Republic of"
pop2030$CountryName[which(pop2030$CountryName=="Congo")]="Congo, Republic of"
pop2030$CountryName[which(pop2030$CountryName=="CÃ´te d'Ivoire")]="Cote d'Ivoire"
pop2030$CountryName[which(pop2030$CountryName=="Czechia")]="Czech Republic"
pop2030$CountryName[which(pop2030$CountryName=="Egypt")]="Egypt, Arab Republic of"
pop2030$CountryName[which(pop2030$CountryName=="Gambia")]="Gambia, The"
pop2030$CountryName[which(pop2030$CountryName=="Iran (Islamic Republic of)")]="Iran, Islamic Republic of"
pop2030$CountryName[which(pop2030$CountryName=="Republic of Korea")]="Korea, Republic of"
pop2030$CountryName[which(pop2030$CountryName=="Kyrgyzstan")]="Kyrgyz Republic"
pop2030$CountryName[which(pop2030$CountryName=="TFYR Macedonia")]="Macedonia, former Yugoslav Republic of"
pop2030$CountryName[which(pop2030$CountryName=="Micronesia (Fed. States of)")]="Micronesia, Federated States of"
pop2030$CountryName[which(pop2030$CountryName=="Republic of Moldova")]="Moldova"
pop2030$CountryName[which(pop2030$CountryName=="Slovakia")]="Slovak Republic"
pop2030$CountryName[which(pop2030$CountryName=="Saint Lucia")]="St. Lucia"
pop2030$CountryName[which(pop2030$CountryName=="United Republic of Tanzania")]="Tanzania"
pop2030$CountryName[which(pop2030$CountryName=="United States of America")]="United States"
pop2030$CountryName[which(pop2030$CountryName=="Venezuela (Bolivarian Republic of)")]="Venezuela, Republica Bolivariana de"
pop2030$CountryName[which(pop2030$CountryName=="Viet Nam")]="Vietnam"
pop2030$CountryName[which(pop2030$CountryName=="Yemen")]="Yemen, Republic of"
pop2030$CountryName[which(pop2030$CountryName=="State of Palestine")]="West Bank and Gaza"
pop2030=pop2030[,c("CountryName","PopTotal")]
noncountries<- c("Africa"
,"Asia"
,"American Samoa"
,"Anguilla"
,"Australia/New Zealand"
,"British Virgin Islands"
,"Americaan Samoa"
,"Caribbean"
,"Caribbean Netherlands"
,"Cayman Islands"
,"Central America"
,"Central Asia"
,"Channel Islands"
,"China, Hong Kong SAR"
,"China, Macao SAR"
,"CuraÃ§ao"
,"Eastern Africa"
,"Eastern Asia"
,"Eastern Europe"
,"Europe"
,"Faeroe Islands"
,"Falkland Islands (Malvinas)"
,"French Guiana"
,"French Polynesia"
,"Gibraltar"
,"Greenland"
,"Grenada"
,"Guam"
,"Guadeloupe"
,"High-income countries"
,"Isle of Man"
,"Latin America and the Caribbean"
,"Least developed countries"
,"Less developed regions"
,"Less developed regions, excluding China"
,"Less developed regions, excluding least developed countries"
,"Low-income countries"
,"Lower-middle-income countries"
,"Martinique"
,"Mayotte"
,"Melanesia"
,"Middle Africa"
,"Middle-income countries"
,"Montserrat"
,"More developed regions"
,"New Caledonia"
,"Northern Africa"
,"Northern America"
,"Northern Europe"
,"Northern Mariana Islands"
,"Oceania"
,"Polynesia"
,"Puerto Rico"
,"RÃ©union"
,"Saint Helena"
,"Saint Kitts and Nevis"
,"Saint Vincent and the Grenadines"
,"Saint Pierre and Miquelon"
,"Sint Maarten (Dutch part)"
,"South America"
,"South-Central Asia"
,"South-Eastern Asia"
,"Southern Africa"
,"Southern Asia"
,"Southern Europe"
,"Sub-Saharan Africa"
,"Turks and Caicos Islands"
,"United States Virgin Islands"
,"Upper-middle-income countries"
,"Wallis and Futuna Islands"
,"Western Africa"
,"Western Asia"
,"Western Europe"
,"Western Sahara"
,"World"
)
countries=setdiff(unique(pop2030$CountryName),noncountries)
pop2030=subset(pop2030, CountryName %in% countries)
forecasts=join(pop2030,forecasts,by="CountryName")
forecasts$RegionCode[which(forecasts$CountryName=="Afghanistan")]="SAS"
forecasts$RegionCode[which(forecasts$CountryName=="Libya")]="MNA"
forecasts$RegionCode[which(forecasts$CountryName=="Syrian Arab Republic")]="MNA"
forecasts$RegionCode[which(forecasts$CountryName=="State of Palestine")]="MNA"
forecasts$RegionCode[which(forecasts$CountryName=="West Bank and Gaza")]="MNA"
forecasts$RegionCode[which(forecasts$CountryName=="Equatorial Guinea")]="SSA"
forecasts$RegionCode[which(forecasts$CountryName=="Eritrea")]="SSA"
forecasts$RegionCode[which(forecasts$CountryName=="Somalia")]="SSA"
forecasts$RegionCode[which(forecasts$CountryName=="Argentina")]="LAC"
forecasts$RegionCode[which(forecasts$CountryName=="Cuba")]="LAC"
forecasts$RegionCode[which(forecasts$CountryName=="Cambodia")]="EAP"
forecasts$RegionCode[which(forecasts$CountryName=="Marshall Islands")]="EAP"
forecasts$RegionCode[which(forecasts$CountryName=="Micronesia")]="EAP"
forecasts$RegionCode[which(forecasts$CountryName=="Cook Islands")]="EAP"
forecasts$RegionCode[which(forecasts$CountryName=="Dem. People's Republic of Korea")]="EAP"
forecasts$RegionCode[which(forecasts$CountryName=="Nauru")]="EAP"
forecasts$RegionCode[which(forecasts$CountryName=="Niue")]="EAP"
forecasts$RegionCode[which(forecasts$CountryName=="Palau")]="EAP"
forecasts$RegionCode[which(forecasts$CountryName=="Tokelau")]="EAP"
forecasts$RegionCode[which(forecasts$CountryName=="Andorra" )]="OHI"
forecasts$RegionCode[which(forecasts$CountryName=="Antigua and Barbuda")]="OHI"
forecasts$RegionCode[which(forecasts$CountryName=="Aruba")]="OHI"
forecasts$RegionCode[which(forecasts$CountryName=="Bahamas")]="OHI"
forecasts$RegionCode[which(forecasts$CountryName=="Bahrain")]="OHI"
forecasts$RegionCode[which(forecasts$CountryName=="Barbados")]="OHI"
forecasts$RegionCode[which(forecasts$CountryName=="Bermuda")]="OHI"
forecasts$RegionCode[which(forecasts$CountryName=="Brunei Darussalam" )]="OHI"
forecasts$RegionCode[which(forecasts$CountryName=="China, Taiwan Province of China")]="OHI"
forecasts$RegionCode[which(forecasts$CountryName=="Dominica" )]="OHI"
forecasts$RegionCode[which(forecasts$CountryName=="Guadeloupe")]="OHI"
forecasts$RegionCode[which(forecasts$CountryName=="Holy See")]="OHI"
forecasts$RegionCode[which(forecasts$CountryName=="Kuwait")]="OHI"
forecasts$RegionCode[which(forecasts$CountryName=="Liechtenstein")]="OHI"
forecasts$RegionCode[which(forecasts$CountryName=="Monaco")]="OHI"
forecasts$RegionCode[which(forecasts$CountryName=="New Zealand")]="OHI"
forecasts$RegionCode[which(forecasts$CountryName=="Oman")]="OHI"
forecasts$RegionCode[which(forecasts$CountryName=="Qatar" )]="OHI"
forecasts$RegionCode[which(forecasts$CountryName=="San Marino")]="OHI"
forecasts$RegionCode[which(forecasts$CountryName=="Saudi Arabia" )]="OHI"
forecasts$RegionCode[which(forecasts$CountryName=="Singapore" )]="OHI"
forecasts$RegionCode[which(forecasts$CountryName=="United Arab Emirates")]="OHI"
forecasts=join(forecasts,regionalforecasts,by=c("RegionCode"))
forecasts$BaseHC2030[which(is.na(forecasts$BaseHC2030))]=forecasts$r.base[which(is.na(forecasts$BaseHC2030))]
forecasts$PlusOneHC2030[which(is.na(forecasts$PlusOneHC2030))]=forecasts$r.plusone[which(is.na(forecasts$PlusOneHC2030))]
forecasts$MinusOneHC2030[which(is.na(forecasts$MinusOneHC2030))]=forecasts$r.minusone[which(is.na(forecasts$MinusOneHC2030))]
forecasts$pop2030=forecasts$PopTotal/1000
forecasts$BaseHC2030=as.numeric(forecasts$BaseHC2030)
forecasts$basepoorpop=((forecasts$BaseHC2030/100)*forecasts$pop2030)
forecasts$PlusOneHC2030=as.numeric(forecasts$PlusOneHC2030)
forecasts$plusonepop=((forecasts$PlusOneHC2030/100)*forecasts$pop2030)
forecasts$MinusOneHC2030=as.numeric(forecasts$MinusOneHC2030)
forecasts$minusonepop=((forecasts$MinusOneHC2030/100)*forecasts$pop2030)
write.csv(forecasts,"forecasts20180612.csv")
regiontab=data.table(forecasts)[,.(
base=sum(basepoorpop, na.rm=T)
,low=sum(minusonepop, na.rm=T)
,high=sum(plusonepop, na.rm=T)
),by="RegionCode"]
regiontab$RequestYear=2030
regiontab=regiontab[,c("RegionCode","base","low","high","RequestYear")]
worldtab=data.table(regiontab)[,.(
base=sum(base, na.rm=T)
,low=sum(low, na.rm=T)
,high=sum(high, na.rm=T))]
worldtab$RegionCode="WLD"
worldtab$RequestYear=2030
regiontab=rbind(regiontab,worldtab)
CLB=c("Afghanistan"
,"Benin"
,"Burkina Faso"
,"Burundi"
,"Central African Republic"
,"Chad"
,"Comoros"
,"Cote d'Ivoire"
,"Congo, Democratic Republic of"
,"Eritrea"
,"Guinea"
,"Guinea-Bissau"
,"Haiti"
,"Lesotho"
,"Liberia"
,"Madagascar"
,"Malawi"
,"Mali"
,"Mauritania"
,"Mozambique"
,"Niger"
,"Papua New Guinea"
,"Sierra Leone"
,"Somalia"
,"South Sudan"
,"Sudan"
,"Gabmia, The"
,"Togo"
,"Uganda"
,"Yemen")
forecasts$CLB=0
forecasts$CLB[which(forecasts$CountryName %in% CLB)]=1
CLBpov=c("Afghanistan"
, "Benin"
, "Burundi"
, "Central African Republic"
, "Comoros"
, "Congo"
, "Dem. People's Rep. Korea"
, "Dem. Rep. Congo"
, "Eritrea"
, "Guinea"
, "Guinea-Bissau"
, "Haiti"
, "Lesotho"
, "Liberia"
, "Madagascar"
, "Malawi"
, "Mali"
, "Mozambique"
, "Niger"
, "Nigeria"
, "Rwanda"
, "Senegal"
, "Somalia"
, "South Sudan"
, "St. Lucia"
, "Swaziland"
, "The Gambia"
, "Togo"
, "Yemen"
,  "Zambia")
forecasts$clbpov=0
forecasts$clbpov[which(forecasts$CountryName %in% CLBpov)]=1
CLBtable=data.table(forecasts)[,.(
base=sum(basepoorpop, na.rm=T)
,low=sum(minusonepop, na.rm=T)
,high=sum(plusonepop, na.rm=T)
),by="CLB"]
CLBpovtable=data.table(forecasts)[,.(
base=sum(basepoorpop, na.rm=T)
,low=sum(minusonepop, na.rm=T)
,high=sum(plusonepop, na.rm=T)
),by="clbpov"]
CLBregtable=data.table(forecasts)[,.(
base=sum(basepoorpop, na.rm=T)
,low=sum(minusonepop, na.rm=T)
,high=sum(plusonepop, na.rm=T)
),by="RegionCode"]
load("~/Poverty Data/AGGPovcalScrape1May2018.RData")
View(forecasts)
